import { useState, useRef } from 'react'
import { useMutation, useQueryClient } from '@tanstack/react-query'
import { api } from '../services/api'
import QrScanner from 'qr-scanner'


type ScanMode = 'camera' | 'upload' | 'manual'

export default function ScanPage() {
  const [mode, setMode] = useState<ScanMode | null>(null)
  const [qrInput, setQrInput] = useState('')
  const [success, setSuccess] = useState('')
  const [isScanning, setIsScanning] = useState(false)
  const [scanError, setScanError] = useState('')
  const [qrScanner, setQrScanner] = useState<QrScanner | null>(null)
  const [isProcessingQR, setIsProcessingQR] = useState(false)  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
  const videoRef = useRef<HTMLVideoElement>(null)
  const queryClient = useQueryClient()

  const processQRMutation = useMutation({
    mutationFn: api.processQR,
    onSuccess: (data) => {
      console.log('üéâ QR –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ:', data)
      setSuccess(data.message)
      queryClient.invalidateQueries({ queryKey: ['payments'] })
      queryClient.invalidateQueries({ queryKey: ['balance'] })
      setIsProcessingQR(false)
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        resetToMenu()
      }, 3000)
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR:', error)
      setIsProcessingQR(false)
    }
  })

  const handleManualSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (qrInput.trim()) {
      processQRMutation.mutate(qrInput.trim())
    }
  }

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) {
      resetToMenu()
      return
    }

    setMode('upload')
    setIsScanning(true)
    setScanError('')

    try {
      console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', file.name)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ—â–Ω–æ–≥–æ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const formData = new FormData()
      formData.append('image', file)
      
      const response = await fetch('/api/scan-qr', {
        method: 'POST',
        body: formData,
        credentials: 'include'
      })
      
      const result = await response.json()
      
      if (result.success && result.data) {
        console.log(`üéâ QR —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –º–µ—Ç–æ–¥–æ–º ${result.method} (${result.methodName}):`, result.data.substring(0, 100) + '...')
        processQRMutation.mutate(result.data)
      } else {
        console.log('‚ùå –°–µ—Ä–≤–µ—Ä–Ω—ã–π QR —Å–∫–∞–Ω–µ—Ä –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∫–æ–¥:', result.error)
        setScanError(result.error || 'QR –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ QR –∫–æ–¥ —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ë–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ\n‚Ä¢ –õ—É—á—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n‚Ä¢ QR –∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –∫–∞–¥—Ä–µ\n\n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.')
        
        setTimeout(() => {
          resetToMenu()
        }, 5000)
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error)
      setScanError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
      setTimeout(() => {
        resetToMenu()
      }, 3000)
    } finally {
      setIsScanning(false)
      // –û—á–∏—â–∞–µ–º input
      e.target.value = ''
    }
  }





  const startCameraScanning = async () => {
    if (!videoRef.current) return

    try {
      setIsScanning(true)
      setScanError('')

      const scanner = new QrScanner(
        videoRef.current,
        (result) => {
          // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
          if (isProcessingQR) {
            console.log('QR —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º...')
            return
          }
          
          console.log('QR –∫–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω:', result.data)
          setIsProcessingQR(true)
          processQRMutation.mutate(result.data)
          stopScanning()
        },
        {
          highlightScanRegion: true,
          highlightCodeOutline: true,
          maxScansPerSecond: 2,
          returnDetailedScanResult: true
        }
      )

      await scanner.start()
      setQrScanner(scanner)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã:', error)
      setScanError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.')
      setIsScanning(false)
    }
  }

  const stopScanning = () => {
    if (qrScanner) {
      qrScanner.stop()
      qrScanner.destroy()
      setQrScanner(null)
    }
    setIsScanning(false)
  }

  const resetToMenu = () => {
    stopScanning()
    setMode(null)
    setQrInput('')
    setSuccess('')
    setScanError('')
    setIsProcessingQR(false)
  }

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  if (!mode) {
    return (
      <div className="max-w-md mx-auto">
        <div className="text-center mb-8">
          <div className="w-16 h-16 mx-auto mb-4 bg-blue-100 rounded-full flex items-center justify-center">
            <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h2M4 4h5m0 0v5m0 0h5m0 0v5" />
            </svg>
          </div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">
            –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞
          </h1>
          <p className="text-gray-600">
            –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ QR –∫–æ–¥–∞
          </p>
        </div>

        <div className="space-y-4">
          {/* –ö–Ω–æ–ø–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä–æ–π */}
          <button
            onClick={() => setMode('camera')}
            className="w-full card hover:shadow-lg transition-shadow p-4"
          >
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
              </div>
              <div className="text-left flex-1">
                <h3 className="font-medium text-gray-900">–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä–æ–π</h3>
                <p className="text-sm text-gray-600">–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR –∫–æ–¥</p>
              </div>
              <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </div>
          </button>

          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ */}
          <label className="w-full card hover:shadow-lg transition-shadow p-4 cursor-pointer block">
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
              <div className="text-left flex-1">
                <h3 className="font-medium text-gray-900">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ</h3>
                <p className="text-sm text-gray-600">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ —Å QR –∫–æ–¥–æ–º</p>
              </div>
              <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </div>
            <input
              type="file"
              accept="image/*"
              onChange={handleFileUpload}
              className="hidden"
            />
          </label>

          {/* –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ */}
          <button
            onClick={() => setMode('manual')}
            className="w-full card hover:shadow-lg transition-shadow p-4"
          >
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center">
                <svg className="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
              </div>
              <div className="text-left flex-1">
                <h3 className="font-medium text-gray-900">–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é</h3>
                <p className="text-sm text-gray-600">–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ QR –¥–∞–Ω–Ω—ã–µ</p>
              </div>
              <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </div>
          </button>
        </div>

        <div className="mt-8">
          <div className="bg-blue-50 rounded-lg p-4 text-center">
            <h4 className="font-medium mb-2 flex items-center justify-center">
              <svg className="w-4 h-4 text-blue-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
              </svg>
              –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å QR –∫–æ–¥:
            </h4>
            <ol className="list-decimal list-inside space-y-1 text-xs text-left">
              <li>–ù–∞–π–¥–∏—Ç–µ QR –∫–æ–¥ –≤–Ω–∏–∑—É —á–µ–∫–∞ (–æ–±—ã—á–Ω–æ —Ä—è–¥–æ–º —Å —Å—É–º–º–æ–π)</li>
              <li>–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π —Å–ø–æ—Å–æ–± –≤—ã—à–µ</li>
              <li>–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –§–ù–°</li>
              <li>AI –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</li>
              <li>–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ç–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç–∏–ª</li>
            </ol>
          </div>
        </div>
      </div>
    )
  }

  // –≠–∫—Ä–∞–Ω —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä–æ–π
  if (mode === 'camera') {
    return (
      <div className="max-w-md mx-auto">
        <div className="text-center mb-6">
          <div className="w-16 h-16 mx-auto mb-4 bg-blue-100 rounded-full flex items-center justify-center">
            <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
          </div>
          <h1 className="text-xl font-bold text-gray-900 mb-1">
            –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR
          </h1>
          <p className="text-gray-600 text-sm">
            –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR –∫–æ–¥ —á–µ–∫–∞
          </p>
        </div>

        <div className="card overflow-hidden">
          {/* –í–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */}
          <div className="relative bg-black rounded-lg overflow-hidden" style={{ aspectRatio: '4/3' }}>
            <video
              ref={videoRef}
              className="w-full h-full object-cover"
              playsInline
              muted
            />
            
            {/* –û–≤–µ—Ä–ª–µ–π —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ */}
            {!isScanning && (
              <div className="absolute inset-0 bg-black/70 flex items-center justify-center">
                <div className="text-center text-white p-4">
                  <div className="w-12 h-12 mx-auto mb-2 bg-white/20 rounded-full flex items-center justify-center">
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                  </div>
                  <p className="text-sm">–ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É"</p>
                </div>
              </div>
            )}
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
            {isScanning && (
              <div className="absolute top-4 left-4 bg-green-500 text-white px-3 py-1 rounded-full text-xs font-medium flex items-center">
                <svg className="w-3 h-3 mr-1 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
                –ò—â–µ–º QR –∫–æ–¥...
              </div>
            )}
          </div>

          {/* –û—à–∏–±–∫–∏ */}
          {scanError && (
            <div className="mt-4 bg-red-50 border border-red-200 rounded-lg p-3">
              <p className="text-red-600 text-sm">{scanError}</p>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="mt-4 flex space-x-3">
            <button
              onClick={resetToMenu}
              className="flex-1 btn btn-secondary flex items-center justify-center"
            >
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
              </svg>
              –ù–∞–∑–∞–¥
            </button>
            {!isScanning ? (
              <button
                onClick={startCameraScanning}
                className="flex-1 btn btn-primary flex items-center justify-center"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É
              </button>
            ) : (
              <button
                onClick={stopScanning}
                className="flex-1 btn btn-danger flex items-center justify-center"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
                –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
              </button>
            )}
          </div>
        </div>

        <div className="mt-4 text-center">
          <div className="text-xs text-gray-600 bg-green-50 rounded-lg p-3 flex items-center">
            <svg className="w-4 h-4 text-green-600 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
            </svg>
            <span><strong>–°–æ–≤–µ—Ç:</strong> –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–≤–Ω–æ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ QR –∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ–Ω –≤ –∫–∞–¥—Ä–µ</span>
          </div>
        </div>
      </div>
    )
  }

  // –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  if (mode === 'upload') {
    return (
      <div className="max-w-md mx-auto">
        <div className="text-center mb-8">
          <div className="w-16 h-16 mx-auto mb-4 bg-green-100 rounded-full flex items-center justify-center">
            <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">
            –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          </h1>
          <p className="text-gray-600">
            –°–∫–∞–Ω–∏—Ä—É–µ–º QR –∫–æ–¥ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ...
          </p>
        </div>

        <div className="card p-8 text-center">
          {isScanning ? (
            <div className="space-y-4">
              <div className="w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto" />
              <p className="text-gray-600">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</p>
              <p className="text-xs text-gray-500">–ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏</p>
              <div className="text-xs text-gray-400 space-y-1">
                <div>‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</div>
                <div>‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏</div>
                <div>‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏</div>
                <div>‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ</div>
              </div>
            </div>
          ) : processQRMutation.isPending ? (
            <div className="space-y-4">
              <div className="w-16 h-16 border-4 border-green-600 border-t-transparent rounded-full animate-spin mx-auto" />
              <p className="text-gray-600">–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫...</p>
              <p className="text-xs text-gray-500">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –§–ù–°</p>
            </div>
          ) : success ? (
            <div className="space-y-4">
              <div className="w-12 h-12 mx-auto bg-green-100 rounded-full flex items-center justify-center">
                <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <p className="text-green-600 font-medium">–ì–æ—Ç–æ–≤–æ!</p>
              <p className="text-sm text-gray-600">{success}</p>
            </div>
          ) : processQRMutation.error ? (
            <div className="space-y-4">
              <div className="w-12 h-12 mx-auto bg-red-100 rounded-full flex items-center justify-center">
                <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </div>
              <p className="text-red-600 font-medium">–û—à–∏–±–∫–∞</p>
              <p className="text-sm text-gray-600">{(processQRMutation.error as Error).message}</p>
            </div>
          ) : scanError ? (
            <div className="space-y-4">
              <div className="w-12 h-12 mx-auto bg-red-100 rounded-full flex items-center justify-center">
                <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </div>
              <p className="text-red-600 font-medium">QR –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
              <p className="text-sm text-gray-600">{scanError}</p>
            </div>
          ) : (
            <div className="space-y-4">
              <div className="w-12 h-12 mx-auto bg-green-100 rounded-full flex items-center justify-center">
                <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <p className="text-gray-600 font-medium">QR –∫–æ–¥ –Ω–∞–π–¥–µ–Ω</p>
              <p className="text-xs text-gray-500">–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞...</p>
            </div>
          )}
        </div>

        <div className="mt-6 text-center">
          <button 
            onClick={resetToMenu} 
            className="btn btn-secondary flex items-center justify-center mx-auto"
            disabled={isScanning}
          >
            <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞
          </button>
        </div>
      </div>
    )
  }

  // –≠–∫—Ä–∞–Ω —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
  if (mode === 'manual') {
    return (
      <div className="max-w-md mx-auto">
        <div className="text-center mb-8">
          <div className="w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
            <svg className="w-8 h-8 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
          </div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">
            –†—É—á–Ω–æ–π –≤–≤–æ–¥ QR
          </h1>
          <p className="text-gray-600">
            –í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ QR –∫–æ–¥–∞
          </p>
        </div>

        <div className="card">
          <form onSubmit={handleManualSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                QR –∫–æ–¥ —Å —á–µ–∫–∞
              </label>
              <textarea
                value={qrInput}
                onChange={(e) => setQrInput(e.target.value)}
                className="input min-h-[120px]"
                placeholder="t=20250630T1736&s=1620.64&fn=7380440801199300&i=125393&fp=2940285335&n=1"
                rows={4}
                autoFocus
              />
              <p className="text-xs text-gray-500 mt-1">
                –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –∏–∑ QR –∫–æ–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä—É—á–Ω—É—é
              </p>
            </div>

            {processQRMutation.error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                <p className="text-red-600 text-sm">
                  {(processQRMutation.error as Error).message}
                </p>
              </div>
            )}

            {success && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                <p className="text-green-600 text-sm">{success}</p>
              </div>
            )}

            <div className="flex space-x-3">
              <button
                type="button"
                onClick={resetToMenu}
                className="flex-1 btn btn-secondary flex items-center justify-center"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                –ù–∞–∑–∞–¥
              </button>
              <button
                type="submit"
                disabled={!qrInput.trim() || processQRMutation.isPending}
                className="flex-1 btn btn-primary flex items-center justify-center"
              >
                {processQRMutation.isPending ? (
                  <>
                    <svg className="w-4 h-4 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    –û–±—Ä–∞–±–æ—Ç–∫–∞...
                  </>
                ) : (
                  <>
                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h2M4 4h5m0 0v5m0 0h5m0 0v5" />
                    </svg>
                    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å QR
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    )
  }

  return (
    <>
      {/* –°–∫—Ä—ã—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è html5-qrcode */}
      <div id="temp-qr-reader" style={{ display: 'none' }}></div>
    </>
  )
} 