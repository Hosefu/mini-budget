import { useState } from 'react'
import { useMutation, useQueryClient } from '@tanstack/react-query'
import { api } from '../services/api'

export default function LoginPage() {
  const [pin, setPin] = useState('')
  const [error, setError] = useState('')
  const queryClient = useQueryClient()

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
  const loginMutation = useMutation({
    mutationFn: api.login,
    onSuccess: (data) => {
      // –°—Ä–∞–∑—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à React Query
      queryClient.setQueryData(['me'], { role: data.role })
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
      queryClient.invalidateQueries({ queryKey: ['me'] })
      queryClient.invalidateQueries({ queryKey: ['payments'] })
      queryClient.invalidateQueries({ queryKey: ['balance'] })
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è React Query
      setTimeout(() => {
        queryClient.refetchQueries({ queryKey: ['me'] })
      }, 50)
    },
    onError: (error: Error) => {
      setError(error.message)
    },
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    setError('')
    
    if (pin.length !== 4) {
      setError('PIN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 4 —Ü–∏—Ñ—Ä—ã')
      return
    }
    
    loginMutation.mutate(pin)
  }

  const handlePinChange = (value: string) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    const digits = value.replace(/\D/g, '').slice(0, 4)
    setPin(digits)
    setError('')
  }

  // –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ (–¥–ª—è –¥–µ–º–æ)
  const quickPins = [
    { pin: '1329', name: '–ï–≥–æ—Ä', emoji: 'üë®‚Äçüíª' },
    { pin: '3415', name: '–°—ë–º–∞', emoji: 'üë©‚Äçüíª' },
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="max-w-md w-full">
        {/* –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <div className="text-6xl mb-4">üí∞</div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            –°–µ–º–µ–π–Ω—ã–π –ë—é–¥–∂–µ—Ç
          </h1>
          <p className="text-gray-600">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –¥–ª—è –ï–≥–æ—Ä–∞ –∏ –°—ë–º—ã
          </p>
        </div>

        {/* –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ */}
        <div className="card">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="pin" className="block text-sm font-medium text-gray-700 mb-2">
                –í–≤–µ–¥–∏—Ç–µ –≤–∞—à PIN-–∫–æ–¥
              </label>
              <input
                id="pin"
                type="password"
                value={pin}
                onChange={(e) => handlePinChange(e.target.value)}
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                className="input text-center text-2xl tracking-widest"
                maxLength={4}
                autoFocus
              />
              <p className="text-xs text-gray-500 mt-1 text-center">
                4 —Ü–∏—Ñ—Ä—ã
              </p>
            </div>

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                <p className="text-red-600 text-sm text-center">{error}</p>
              </div>
            )}

            <button
              type="submit"
              disabled={pin.length !== 4 || loginMutation.isPending}
              className="w-full btn btn-primary text-lg py-3"
            >
              {loginMutation.isPending ? (
                <div className="flex items-center justify-center space-x-2">
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
                  <span>–í—Ö–æ–¥...</span>
                </div>
              ) : (
                '–í–æ–π—Ç–∏'
              )}
            </button>
          </form>

          {/* –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –¥–ª—è –¥–µ–º–æ */}
          <div className="mt-6 pt-6 border-t border-gray-200">
            <p className="text-sm text-gray-500 text-center mb-3">
              –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥:
            </p>
            <div className="flex space-x-3">
              {quickPins.map((user) => (
                <button
                  key={user.pin}
                  onClick={() => handlePinChange(user.pin)}
                  className="flex-1 btn btn-secondary text-sm py-2"
                  disabled={loginMutation.isPending}
                >
                  <span className="mr-2">{user.emoji}</span>
                  {user.name}
                </button>
              ))}
            </div>
            <p className="text-xs text-gray-400 mt-2 text-center">
              –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∑–∞—Ç–µ–º "–í–æ–π—Ç–∏"
            </p>
          </div>
        </div>

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
        <div className="mt-6 text-center">
          <p className="text-sm text-gray-500">
            üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—Ö–æ–¥ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É PIN-–∫–æ–¥—É
          </p>
        </div>
      </div>
    </div>
  )
} 