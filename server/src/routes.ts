import { Router, Request, Response } from 'express';
import { z } from 'zod';
import { db } from './db';
import { classifyItems } from './ai';

const router = Router();

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø—ã –¥–ª—è session
declare module 'express-session' {
  interface SessionData {
    role?: 'egor' | 'syoma';
  }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const requireAuth = (req: Request, res: Response, next: any) => {
  if (!req.session?.role) {
    return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }
  next();
};

// === –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ===

// –í—Ö–æ–¥ –ø–æ PIN-–∫–æ–¥—É
router.post('/auth', (req: Request, res: Response) => {
  const { pin } = req.body;
  console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å PIN:', pin);
  
  let role: 'egor' | 'syoma' | null = null;
  
  if (pin === '1329') {
    role = 'egor';
  } else if (pin === '3415') {
    role = 'syoma';
  }
  
  if (!role) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π PIN:', pin);
    return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π PIN' });
  }
  
  req.session!.role = role;
  console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', role);
  console.log('üç™ –°–µ—Å—Å–∏—è:', req.session);
  res.json({ success: true, role });
});

// –í—ã—Ö–æ–¥
router.post('/logout', (req: Request, res: Response) => {
  req.session!.role = undefined;
  res.json({ success: true });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/me', (req: Request, res: Response) => {
  console.log('üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('üç™ –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:', req.session);
  console.log('üîë –†–æ–ª—å –∏–∑ —Å–µ—Å—Å–∏–∏:', req.session?.role);
  const result = { role: req.session?.role || null };
  console.log('üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º:', result);
  res.json(result);
});

// === –ü–õ–ê–¢–ï–ñ–ò ===

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
router.post('/payment', requireAuth, async (req: Request, res: Response) => {
  try {
    const schema = z.object({
      total: z.number().positive(),
      paidEgor: z.number().min(0).default(0),
      paidSyoma: z.number().min(0).default(0),
      description: z.string().optional(),
      items: z.array(z.object({
        name: z.string(),
        qty: z.number().positive().default(1),
        price: z.number().positive(),
        categoryId: z.number().optional()
      })).optional()
    });

    const data = schema.parse(req.body);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±—â–µ–π —Å—É–º–º–µ
    if (data.paidEgor + data.paidSyoma !== data.total) {
      return res.status(400).json({ 
        error: '–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±—â–µ–π —Å—É–º–º–µ' 
      });
    }

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const insertPayment = db.prepare(`
      INSERT INTO payment (total, paid_egor, paid_syoma, description, created_by)
      VALUES (?, ?, ?, ?, ?)
    `);
    
    const paymentResult = insertPayment.run(
      data.total,
      data.paidEgor,
      data.paidSyoma,
      data.description || null,
      req.session!.role
    );

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if (data.items && data.items.length > 0) {
      const insertItem = db.prepare(`
        INSERT INTO item (payment_id, name, qty, price, category_id)
        VALUES (?, ?, ?, ?, ?)
      `);

      for (const item of data.items) {
        insertItem.run(
          paymentResult.lastInsertRowid,
          item.name,
          item.qty,
          item.price,
          item.categoryId || null
        );
      }
    }

    res.json({ success: true, id: paymentResult.lastInsertRowid });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ QR –∫–æ–¥–∞ —á–µ–∫–∞
router.post('/qr', requireAuth, async (req: Request, res: Response) => {
  try {
    const { qr } = req.body;
    
    if (!qr) {
      return res.status(400).json({ error: 'QR –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    console.log('üì± –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É QR —á–µ–∫–∞...');
    console.log('üìã QR –¥–∞–Ω–Ω—ã–µ:', qr);
    
    // –ü–∞—Ä—Å–∏–º QR –∫–æ–¥ —á–µ–∫–∞
    const qrData = parseReceiptQR(qr);
    console.log('üîç –†–∞—Å–ø–∞—Ä—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞:', qrData);
    
    let total = 0;
    let description = '–ß–µ–∫ –∏–∑ QR –∫–æ–¥–∞';
    
    if (qrData.sum) {
      total = Math.round(qrData.sum * 100); // –≤ –∫–æ–ø–µ–π–∫–∏
      description = `–ß–µ–∫ –æ—Ç ${qrData.date || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –¥–∞—Ç—ã'} –Ω–∞ ${qrData.sum}‚ÇΩ`;
      console.log('üí∞ –°—É–º–º–∞ —á–µ–∫–∞:', qrData.sum, '‚ÇΩ');
    } else {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—É–º–º—É –∏–∑ QR –∫–æ–¥–∞');
      description = '–ß–µ–∫ –∏–∑ QR –∫–æ–¥–∞ (—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º)';
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å QR –¥–∞–Ω–Ω—ã–º–∏
    const insertPayment = db.prepare(`
      INSERT INTO payment (total, paid_egor, paid_syoma, description, created_by, raw_qr)
      VALUES (?, ?, ?, ?, ?, ?)
    `);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–ª–∞—Ç–µ–∂–∞ —Å —Ç–∞–∫–∏–º –∂–µ QR –∫–æ–¥–æ–º
    const existingPayment = db.prepare('SELECT id FROM payment WHERE raw_qr = ?').get(qr);
    if (existingPayment) {
      console.log('‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —Å —Ç–∞–∫–∏–º QR –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return res.json({ 
        success: false, 
        error: '–ü–ª–∞—Ç–µ–∂ —Å —Ç–∞–∫–∏–º QR –∫–æ–¥–æ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω' 
      });
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100% –æ–ø–ª–∞—Ç—ã –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Ç–æ–º—É, –∫—Ç–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç
    const currentUser = req.session!.role;
    const paidEgor = currentUser === 'egor' ? total : 0;
    const paidSyoma = currentUser === 'syoma' ? total : 0;
    
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É...');
    console.log(`üí∞ ${currentUser === 'egor' ? '–ï–≥–æ—Ä' : '–°—ë–º–∞'} –∑–∞–ø–ª–∞—Ç–∏–ª ${(total/100).toFixed(2)}‚ÇΩ (100%)`);
    
    const paymentResult = insertPayment.run(
      total, paidEgor, paidSyoma, description, currentUser, qr
    );

    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —Å ID:', paymentResult.lastInsertRowid);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ —á–µ—Ä–µ–∑ –§–ù–° API
    if (qrData.fn && qrData.i && qrData.fp && qrData.sum) {
      try {
        console.log('üè™ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ —á–µ—Ä–µ–∑ –§–ù–° API...');
        const receiptData = await getReceiptFromFNS({
          fn: qrData.fn,
          i: qrData.i,
          fp: qrData.fp,
          sum: qrData.sum,
          date: qrData.date
        });
        
        if (receiptData && receiptData.items && receiptData.items.length > 0) {
          console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${receiptData.items.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —á–µ–∫–∞:`);
          
          const insertItem = db.prepare(`
            INSERT INTO item (payment_id, name, qty, price)
            VALUES (?, ?, ?, ?)
          `);
          
          for (const item of receiptData.items) {
            const itemResult = insertItem.run(
              paymentResult.lastInsertRowid,
              item.name,
              item.quantity,
              item.sum // —Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            );
            console.log(`üì¶ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä "${item.name}" ${item.quantity}—à—Ç √ó ${(item.sum/100).toFixed(2)}‚ÇΩ`);
          }
          
          console.log('‚úÖ –†–µ–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —á–µ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é...');
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
          try {
            const { classifyItems } = await import('./ai');
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            const items = db.prepare('SELECT id, name, qty, price FROM item WHERE payment_id = ?').all(paymentResult.lastInsertRowid);
            console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${items.length}`);
            
            if (items.length > 0) {
              // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
              const categories = db.prepare('SELECT id, name, description FROM category ORDER BY name').all();
              console.log(`üè∑Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
              
              if (categories.length > 0) {
                const classification = await classifyItems(items as any[], categories as any[]);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                const updateItem = db.prepare('UPDATE item SET category_id = ? WHERE id = ?');
                let updatedCount = 0;
                
                for (const [itemId, categoryId] of Object.entries(classification)) {
                  updateItem.run(categoryId, parseInt(itemId));
                  updatedCount++;
                }
                
                console.log(`‚úÖ AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª ${updatedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
              } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏');
              }
            }
          } catch (aiError) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:', aiError);
            console.log('üí° –¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é.');
          }
        } else {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –§–ù–° API. –ß–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤.');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –§–ù–° API:', error);
        console.log('‚ö†Ô∏è –ß–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤—Ä—É—á–Ω—É—é.');
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –§–ù–° API. –ß–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤.');
    }

    res.json({ 
      success: true, 
      id: paymentResult.lastInsertRowid,
      message: total > 0 
        ? `–ß–µ–∫ –Ω–∞ ${(total/100).toFixed(2)}‚ÇΩ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫—Ç–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç–∏–ª.`
        : 'QR –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–ª–∞—Ç–µ–∂ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏.'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR –∫–æ–¥–∞: ' + (error as Error).message });
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ QR –∫–æ–¥–∞ —á–µ–∫–∞
function parseReceiptQR(qr: string): {
  date?: string;
  sum?: number;
  fn?: string;
  i?: string;
  fp?: string;
} {
  try {
    const params = new URLSearchParams(qr.replace(/^[^?]*\?/, ''));
    
    const result: any = {};
    
    // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (t)
    const t = params.get('t');
    if (t) {
      try {
        // –§–æ—Ä–º–∞—Ç: 20250630T1736
        const dateStr = t.replace('T', ' ');
        const year = dateStr.substr(0, 4);
        const month = dateStr.substr(4, 2);
        const day = dateStr.substr(6, 2);
        const hour = dateStr.substr(9, 2);
        const min = dateStr.substr(11, 2);
        result.date = `${day}.${month}.${year} ${hour}:${min}`;
      } catch {
        result.date = t;
      }
    }
    
    // –°—É–º–º–∞ (s)
    const s = params.get('s');
    if (s) {
      result.sum = parseFloat(s);
    }
    
    // –ü—Ä–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    result.fn = params.get('fn');
    result.i = params.get('i');
    result.fp = params.get('fp');
    
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ QR:', error);
    return {};
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–∞ —á–µ—Ä–µ–∑ –§–ù–° API
async function getReceiptFromFNS(qrData: {
  fn: string;
  i: string; 
  fp: string;
  sum: number;
  date?: string;
}): Promise<{
  items: Array<{
    name: string;
    quantity: number;
    sum: number; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    price: number; // —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  }>;
} | null> {
  try {
    console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –§–ù–° API:', qrData);
    
    const token = process.env.FNS_API_TOKEN;
    if (!token) {
      console.log('‚ö†Ô∏è FNS_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      return null;
    }

    console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ proverkacheka.com (–º–µ—Ç–æ–¥ POST)...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º POST –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º –≤ —Ç–µ–ª–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    // –§–æ—Ä–º–∏—Ä—É–µ–º qrraw –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –ø—Ä–∏—à–µ–ª —Å QR –∫–æ–¥–∞
    const dateParam = qrData.date ? 
      qrData.date.replace(/(\d{2})\.(\d{2})\.(\d{4}) (\d{2}):(\d{2})/, '$3$2$1T$4$5') : 
      '20250101T0000';
    
    const requestData = {
      token: token,
      qrraw: `t=${dateParam}&s=${qrData.sum}&fn=${qrData.fn}&i=${qrData.i}&fp=${qrData.fp}&n=1`
    };
    
    console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', requestData);
    
    const response = await fetch('https://proverkacheka.com/api/v1/check/get', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'mini-budget-app/1.0'
      },
      body: new URLSearchParams(requestData).toString()
    });

    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç proverkacheka.com:', errorText);
      return null;
    }

    const data = await response.json();
    console.log('üì¶ –û—Ç–≤–µ—Ç –æ—Ç API:', JSON.stringify(data, null, 2));
    
    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç proverkacheka.com
    if (data.code === 1 && data.data && data.data.json && data.data.json.items) {
      const items = data.data.json.items.map((item: any) => ({
        name: item.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
        quantity: item.quantity || 1,
        sum: item.sum || 0, // —É–∂–µ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        price: item.price || 0 // —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —É–∂–µ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
      }));
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${items.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —á–µ–∫–∞`);
      items.forEach((item: any) => {
        console.log(`üì¶ ${item.name}: ${item.quantity}—à—Ç √ó ${(item.price/100).toFixed(2)}‚ÇΩ = ${(item.sum/100).toFixed(2)}‚ÇΩ`);
      });
      return { items };
    } else {
      console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç proverkacheka.com –∏–ª–∏ —á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', Object.keys(data));
      console.log('üîç code:', data.code, 'data:', !!data.data);
      return null;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –§–ù–° API:', error);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
router.get('/payments', requireAuth, (req: Request, res: Response) => {
  try {
    const query = `
      SELECT 
        p.*,
        json_group_array(
          json_object(
            'id', i.id,
            'name', i.name,
            'qty', i.qty,
            'price', i.price,
            'categoryId', i.category_id,
            'categoryName', c.name,
            'categoryColor', c.color
          )
        ) as items
      FROM payment p
      LEFT JOIN item i ON p.id = i.payment_id
      LEFT JOIN category c ON i.category_id = c.id
      GROUP BY p.id
      ORDER BY p.ts DESC
    `;
    
    const payments = db.prepare(query).all();
    
    // –ü–∞—Ä—Å–∏–º JSON —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    const processedPayments = payments.map((payment: any) => ({
      ...payment,
      items: JSON.parse(payment.items).filter((item: any) => item.id !== null)
    }));
    
    res.json(processedPayments);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π' });
  }
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
router.patch('/payment/:id', requireAuth, (req: Request, res: Response) => {
  try {
    const paymentId = parseInt(req.params.id);
    const updates = req.body;
    
    const updatePayment = db.prepare(`
      UPDATE payment 
      SET total = ?, paid_egor = ?, paid_syoma = ?, description = ?
      WHERE id = ?
    `);
    
    updatePayment.run(
      updates.total,
      updates.paidEgor,
      updates.paidSyoma,
      updates.description,
      paymentId
    );
    
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
router.delete('/payment/:id', requireAuth, (req: Request, res: Response) => {
  try {
    const paymentId = parseInt(req.params.id);
    
    const deletePayment = db.prepare('DELETE FROM payment WHERE id = ?');
    deletePayment.run(paymentId);
    
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞' });
  }
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
router.patch('/item/:id', requireAuth, (req: Request, res: Response) => {
  try {
    const itemId = parseInt(req.params.id);
    const { name, qty, price, categoryId } = req.body;
    
    console.log(`üìù –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä ${itemId}:`, { name, qty, price, categoryId });
    
    const updateItem = db.prepare(`
      UPDATE item 
      SET name = COALESCE(?, name), 
          qty = COALESCE(?, qty), 
          price = COALESCE(?, price), 
          category_id = COALESCE(?, category_id)
      WHERE id = ?
    `);
    
    updateItem.run(
      name || null,
      qty || null, 
      price || null,
      categoryId || null,
      itemId
    );
    
    console.log(`‚úÖ –¢–æ–≤–∞—Ä ${itemId} –æ–±–Ω–æ–≤–ª–µ–Ω`);
    res.json({ success: true });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞' });
  }
});

// AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
router.post('/payment/:id/classify', requireAuth, async (req: Request, res: Response) => {
  try {
    const paymentId = parseInt(req.params.id);
    
    console.log(`ü§ñ –ó–∞–ø—É—Å–∫ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}...`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    const items = db.prepare('SELECT id, name, qty, price FROM item WHERE payment_id = ?').all(paymentId);
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${items.length}`);
    
    if (items.length === 0) {
      return res.json({ success: true, message: '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = db.prepare('SELECT * FROM category').all();
    console.log(`üè∑Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
    const { classifyItems } = require('./ai');
    const classification = await classifyItems(items, categories);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
    const classificationEntries = Object.entries(classification);
    let updatedCount = 0;
    
    if (classificationEntries.length > 0) {
      const updateItem = db.prepare('UPDATE item SET category_id = ? WHERE id = ?');
      
      for (const [itemId, categoryId] of classificationEntries) {
        updateItem.run(categoryId, parseInt(itemId));
        updatedCount++;
      }
      
      console.log(`‚úÖ AI –æ–±–Ω–æ–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É ${updatedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
      res.json({ 
        success: true, 
        updatedCount,
        message: `AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Ç–æ–≤–∞—Ä–æ–≤.`
      });
    } else {
      console.log(`‚ö†Ô∏è AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –¢–æ–≤–∞—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.`);
      res.json({ 
        success: false, 
        updatedCount: 0,
        message: 'AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Ä—É—á–Ω—É—é.'
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' + (error as Error).message });
  }
});

// === –ë–ê–õ–ê–ù–° ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–ø—Ä–∞–≤–∏–ª–æ 50/50)
router.get('/balance', requireAuth, (req: Request, res: Response) => {
  try {
    const balanceQuery = db.prepare(`
      SELECT
        SUM(paid_egor - total/2) AS egor_delta,
        SUM(paid_syoma - total/2) AS syoma_delta,
        SUM(total) AS total_spent,
        COUNT(*) AS payments_count
      FROM payment
      WHERE total > 0
    `);
    
    const balance = balanceQuery.get() as any;
    
    res.json({
      egorBalance: Math.round((balance.egor_delta || 0) / 100), // –≤ —Ä—É–±–ª—è—Ö
      syomaBalance: Math.round((balance.syoma_delta || 0) / 100),
      totalSpent: Math.round((balance.total_spent || 0) / 100),
      paymentsCount: balance.payments_count || 0
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞' });
  }
});

// === –ö–ê–¢–ï–ì–û–†–ò–ò ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
router.get('/categories', requireAuth, (req: Request, res: Response) => {
  try {
    const categories = db.prepare('SELECT * FROM category ORDER BY name').all();
    res.json(categories);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
router.post('/categories', requireAuth, (req: Request, res: Response) => {
  try {
    const schema = z.object({
      id: z.number().optional(),
      name: z.string().min(1),
      description: z.string().optional(),
      color: z.string().regex(/^#[0-9a-fA-F]{6}$/),
      monthlyLimit: z.number().min(0)
    });

    const data = schema.parse(req.body);
    
    if (data.id) {
      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      const updateCategory = db.prepare(`
        UPDATE category 
        SET name = ?, description = ?, color = ?, monthly_limit = ?
        WHERE id = ?
      `);
      updateCategory.run(data.name, data.description, data.color, data.monthlyLimit, data.id);
      res.json({ success: true, id: data.id });
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ
      const insertCategory = db.prepare(`
        INSERT INTO category (name, description, color, monthly_limit)
        VALUES (?, ?, ?, ?)
      `);
      const result = insertCategory.run(data.name, data.description, data.color, data.monthlyLimit);
      res.json({ success: true, id: result.lastInsertRowid });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π:', error);
    res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
router.delete('/categories/:id', requireAuth, (req: Request, res: Response) => {
  try {
    const categoryId = parseInt(req.params.id);
    
    const deleteCategory = db.prepare('DELETE FROM category WHERE id = ?');
    deleteCategory.run(categoryId);
    
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
  }
});

// === AI –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø ===

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
router.post('/ai/classify', requireAuth, async (req: Request, res: Response) => {
  try {
    const { paymentId } = req.body;
    
    if (!paymentId) {
      return res.status(400).json({ error: 'ID –ø–ª–∞—Ç–µ–∂–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–ª–∞—Ç–µ–∂–∞
    const items = db.prepare(`
      SELECT id, name, qty, price 
      FROM item 
      WHERE payment_id = ? AND category_id IS NULL
    `).all(paymentId);

    if (items.length === 0) {
      return res.json({ message: '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = db.prepare('SELECT id, name, description FROM category').all();
    
    // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é Claude
    const classification = await classifyItems(items as any, categories as any);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    const updateItem = db.prepare('UPDATE item SET category_id = ? WHERE id = ?');
    
    for (const [itemId, categoryId] of Object.entries(classification)) {
      updateItem.run(categoryId, parseInt(itemId));
    }
    
    res.json({ 
      success: true, 
      classified: Object.keys(classification).length,
      message: `–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ ${Object.keys(classification).length} —Ç–æ–≤–∞—Ä–æ–≤`
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏' });
  }
});

// –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∫ –ø–ª–∞—Ç–µ–∂—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
router.post('/payment/:id/add-item', requireAuth, (req: Request, res: Response) => {
  try {
    const paymentId = parseInt(req.params.id);
    const { name, qty, price } = req.body;
    
    if (!name || !qty || !price) {
      return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    
    console.log(`üì¶ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –∫ –ø–ª–∞—Ç–µ–∂—É ${paymentId}:`, { name, qty, price });
    
    const insertItem = db.prepare(`
      INSERT INTO item (payment_id, name, qty, price)
      VALUES (?, ?, ?, ?)
    `);
    
    const result = insertItem.run(
      paymentId,
      name,
      parseInt(qty),
      Math.round(parseFloat(price) * 100) // –≤ –∫–æ–ø–µ–π–∫–∏
    );
    
    console.log(`‚úÖ –¢–æ–≤–∞—Ä "${name}" –¥–æ–±–∞–≤–ª–µ–Ω —Å ID:`, result.lastInsertRowid);
    
    res.json({ 
      success: true, 
      id: result.lastInsertRowid,
      message: `–¢–æ–≤–∞—Ä "${name}" –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–ª–∞—Ç–µ–∂—É`
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞' });
  }
});

export default router; 