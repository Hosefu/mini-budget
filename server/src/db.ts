import fs from 'fs';
import path from 'path';

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
const DATA_DIR = path.join(process.cwd(), '../data');
const PAYMENTS_FILE = path.join(DATA_DIR, 'payments.json');
const CATEGORIES_FILE = path.join(DATA_DIR, 'categories.json');
const ITEMS_FILE = path.join(DATA_DIR, 'items.json');

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
export interface Category {
  id: number;
  name: string;
  description: string;
  color: string;
  monthly_limit: number;
  created_at: string;
}

export interface Payment {
  id: number;
  ts: string;
  total: number;
  paid_egor: number;
  paid_syoma: number;
  description?: string;
  raw_qr?: string;
  fns_payload?: string;
  created_by: string;
}

export interface Item {
  id: number;
  payment_id: number;
  name: string;
  qty: number;
  price: number;
  category_id?: number;
  created_at: string;
}

// –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
let categories: Category[] = [];
let payments: Payment[] = [];
let items: Item[] = [];

// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
let categoryIdCounter = 1;
let paymentIdCounter = 1;
let itemIdCounter = 1;

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
const ensureDir = (dirPath: string) => {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
};

const loadData = <T>(filePath: string, defaultData: T[]): T[] => {
  try {
    if (fs.existsSync(filePath)) {
      const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
      return Array.isArray(data) ? data : defaultData;
    }
  } catch (error) {
    console.warn(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${filePath}:`, error);
  }
  return defaultData;
};

const saveData = <T>(filePath: string, data: T[]) => {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ${filePath}:`, error);
  }
};

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è)
export const db = {
  // –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–∏–º–∏—Ç–∞—Ü–∏—è better-sqlite3)
  prepare: (sql: string) => ({
    run: (...params: any[]) => {
      // –ò–º–∏—Ç–∞—Ü–∏—è INSERT
      if (sql.includes('INSERT INTO category')) {
        const [name, description, color, monthly_limit] = params;
        const category: Category = {
          id: categoryIdCounter++,
          name,
          description: description || '',
          color,
          monthly_limit,
          created_at: new Date().toISOString()
        };
        categories.push(category);
        saveData(CATEGORIES_FILE, categories);
        return { lastInsertRowid: category.id };
      }
      
      if (sql.includes('INSERT INTO payment')) {
        const [total, paid_egor, paid_syoma, description, created_by, raw_qr] = params;
        const payment: Payment = {
          id: paymentIdCounter++,
          ts: new Date().toISOString(),
          total,
          paid_egor,
          paid_syoma,
          description,
          created_by,
          raw_qr
        };
        payments.push(payment);
        saveData(PAYMENTS_FILE, payments);
        return { lastInsertRowid: payment.id };
      }
      
      if (sql.includes('INSERT INTO item')) {
        const [payment_id, name, qty, price, category_id] = params;
        const item: Item = {
          id: itemIdCounter++,
          payment_id,
          name,
          qty,
          price,
          category_id,
          created_at: new Date().toISOString()
        };
        items.push(item);
        saveData(ITEMS_FILE, items);
        return { lastInsertRowid: item.id };
      }
      
      // –ò–º–∏—Ç–∞—Ü–∏—è UPDATE
      if (sql.includes('UPDATE payment')) {
        const [total, paid_egor, paid_syoma, description, id] = params;
        const payment = payments.find(p => p.id === id);
        if (payment) {
          payment.total = total;
          payment.paid_egor = paid_egor;
          payment.paid_syoma = paid_syoma;
          payment.description = description;
          saveData(PAYMENTS_FILE, payments);
        }
        return {};
      }
      
      if (sql.includes('UPDATE category')) {
        const [name, description, color, monthly_limit, id] = params;
        const category = categories.find(c => c.id === id);
        if (category) {
          category.name = name;
          category.description = description;
          category.color = color;
          category.monthly_limit = monthly_limit;
          saveData(CATEGORIES_FILE, categories);
        }
        return {};
      }
      
      if (sql.includes('UPDATE item')) {
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ UPDATE item
        if (sql.includes('COALESCE')) {
          // –§–æ—Ä–º–∞—Ç: UPDATE item SET name = COALESCE(?, name), qty = COALESCE(?, qty), price = COALESCE(?, price), category_id = COALESCE(?, category_id) WHERE id = ?
          const [name, qty, price, category_id, id] = params;
          const item = items.find(i => i.id === id);
          if (item) {
            if (name !== null) item.name = name;
            if (qty !== null) item.qty = qty;
            if (price !== null) item.price = price;
            if (category_id !== null) item.category_id = category_id;
            saveData(ITEMS_FILE, items);
          }
        } else {
          // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: UPDATE item SET category_id = ? WHERE id = ?
          const [category_id, id] = params;
          const item = items.find(i => i.id === id);
          if (item) {
            item.category_id = category_id;
            saveData(ITEMS_FILE, items);
          }
        }
        return {};
      }
      
      // –ò–º–∏—Ç–∞—Ü–∏—è DELETE
      if (sql.includes('DELETE FROM payment')) {
        const [id] = params;
        payments = payments.filter(p => p.id !== id);
        items = items.filter(i => i.payment_id !== id); // CASCADE
        saveData(PAYMENTS_FILE, payments);
        saveData(ITEMS_FILE, items);
        return {};
      }
      
      if (sql.includes('DELETE FROM category')) {
        const [id] = params;
        categories = categories.filter(c => c.id !== id);
        saveData(CATEGORIES_FILE, categories);
        return {};
      }
      
      return {};
    },
    
    get: (...params: any[]) => {
      // –ò–º–∏—Ç–∞—Ü–∏—è SELECT –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
      if (sql.includes('SUM(paid_egor - total/2)')) {
        const egor_delta = payments.reduce((sum, p) => sum + (p.paid_egor - p.total/2), 0);
        const syoma_delta = payments.reduce((sum, p) => sum + (p.paid_syoma - p.total/2), 0);
        const total_spent = payments.reduce((sum, p) => sum + p.total, 0);
        
        return {
          egor_delta,
          syoma_delta,
          total_spent,
          payments_count: payments.filter(p => p.total > 0).length
        };
      }
      
      return null;
    },
    
    all: (...params: any[]) => {
      // –ò–º–∏—Ç–∞—Ü–∏—è SELECT –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      if (sql.includes('SELECT * FROM category')) {
        return [...categories].sort((a, b) => a.name.localeCompare(b.name));
      }
      
      // –ò–º–∏—Ç–∞—Ü–∏—è SELECT –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
      if (sql.includes('SELECT id, name, qty, price')) {
        const [payment_id] = params;
        return items.filter(i => i.payment_id === payment_id);
      }
      
      if (sql.includes('SELECT id, name, description FROM category')) {
        return categories.map(c => ({ id: c.id, name: c.name, description: c.description }));
      }
      
      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏
      if (sql.includes('json_group_array')) {
        return payments.map(payment => {
          const paymentItems = items.filter(i => i.payment_id === payment.id);
          const itemsWithCategories = paymentItems.map(item => {
            const category = categories.find(c => c.id === item.category_id);
            return {
              id: item.id,
              name: item.name,
              qty: item.qty,
              price: item.price,
              categoryId: item.category_id,
              categoryName: category?.name,
              categoryColor: category?.color
            };
          });
          
          return {
            ...payment,
            items: JSON.stringify(itemsWithCategories)
          };
        }).sort((a, b) => new Date(b.ts).getTime() - new Date(a.ts).getTime());
      }
      
      return [];
    }
  }),
  
  // –ò–º–∏—Ç–∞—Ü–∏—è exec (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–∞—à–µ–º –∫–æ–¥–µ)
  exec: (sql: string) => {
    // –ó–∞–≥–ª—É—à–∫–∞
  }
};

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
export const initDatabase = () => {
  console.log('üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  ensureDir(DATA_DIR);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
  categories = loadData(CATEGORIES_FILE, []);
  payments = loadData(PAYMENTS_FILE, []);
  items = loadData(ITEMS_FILE, []);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ ID
  categoryIdCounter = categories.length > 0 ? Math.max(...categories.map(c => c.id)) + 1 : 1;
  paymentIdCounter = payments.length > 0 ? Math.max(...payments.map(p => p.id)) + 1 : 1;
  itemIdCounter = items.length > 0 ? Math.max(...items.map(i => i.id)) + 1 : 1;
  
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  if (categories.length === 0) {
    console.log('üìÅ –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    
    const defaultCategories = [
      ['–ë–∞–∫–∞–ª–µ—è', '–ö—Ä—É–ø—ã, –º–∞–∫–∞—Ä–æ–Ω—ã, —Ä–∏—Å, –≥—Ä–µ—á–∫–∞, –Ω—É—Ç, –¥–æ–ª–≥–∏–µ —É–≥–ª–µ–≤–æ–¥—ã', '#6b7280', 0], 
      ['–ë–µ–ª–æ–∫', '–ú—è—Å–æ, –ø—Ç–∏—Ü–∞, —Ä—ã–±–∞, –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã, —è–π—Ü–∞', '#3b82f6', 0],   
      ['–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è', '–°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —É–±–æ—Ä–∫–∏, —Ç—Ä—è–ø–∫–∏, —Å–∞–ª—Ñ–µ—Ç–∫–∏ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ', '#ef4444', 0],       
      ['–î–∂–∞–Ω–≥-—Ñ—É–¥', '–ß–∏–ø—Å—ã, –º–∞—Ä–º–µ–ª–∞–¥, —Å–ª–∞–¥–æ—Å—Ç–∏, —Å–Ω–µ–∫–∏. –í—Å—ë –≤—Ä–µ–¥–Ω–æ–µ –∏ –≤–∫—É—Å–Ω–æ–µ', '#8b5cf6', 4000],   
      ['–ú–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è', '–ú–æ–ª–æ–∫–æ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏ –∫–æ—Ä–æ–≤—å–µ), —Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ, —Å–ª–∏–≤–∫–∏, —Ç–≤–æ—Ä–æ–≥ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ', '#3b82f6', 0], 
      ['–û–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã', '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ, –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, —Å–≤–µ–∂–∏–µ', '#10b981', 0],
      ['–ü—Ä–æ—á–µ–µ', '–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã', '#6b7280', 100],                  
      ['–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–ö–∏–Ω–æ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –∫–∞—Ñ–µ, –¥–æ—Å—É–≥', '#8b5cf6', 0],   
      ['–°–µ—Ä–≤–∏—Å', '–û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É, –ø–∞–∫–µ—Ç—ã –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ', '#3b82f6', 0],
      ['–ß–∞–π, –∫–æ—Ñ–µ', '–ö–æ—Ñ–µ, —á–∞–π, —Ç—Ä–∞–≤—è–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏', '#22c55e', 0]
    ];

    defaultCategories.forEach(([name, desc, color, limit]) => {
      const category: Category = {
        id: categoryIdCounter++,
        name: name as string,
        description: desc as string,
        color: color as string,
        monthly_limit: limit as number,
        created_at: new Date().toISOString()
      };
      categories.push(category);
    });
    
    saveData(CATEGORIES_FILE, categories);
  }

  console.log('‚úÖ JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!');
  console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, ${payments.length} –ø–ª–∞—Ç–µ–∂–µ–π, ${items.length} —Ç–æ–≤–∞—Ä–æ–≤`);
}; 