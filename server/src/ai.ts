import Anthropic from '@anthropic-ai/sdk';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Claude –∫–ª–∏–µ–Ω—Ç–∞ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
function getAnthropicClient() {
  const apiKey = process.env.CLAUDE_API_KEY;
  console.log('üîë Claude API Key —Å—Ç–∞—Ç—É—Å:', apiKey ? `–ï—Å—Ç—å (–¥–ª–∏–Ω–∞: ${apiKey.length})` : '–ù–ï–¢');

  if (!apiKey) {
    throw new Error('CLAUDE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  }

  return new Anthropic({
    apiKey: apiKey,
  });
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface Item {
  id: number;
  name: string;
  qty: number;
  price: number;
}

interface Category {
  id: number;
  name: string;
  description: string;
}

interface ClassificationResult {
  [itemId: number]: number; // itemId -> categoryId
}

/**
 * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –ø–æ–º–æ—â—å—é Claude AI
 * @param items - –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @param categories - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @returns –æ–±—ä–µ–∫—Ç —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º itemId -> categoryId
 */
export async function classifyItems(
  items: Item[], 
  categories: Category[]
): Promise<ClassificationResult> {
  try {
    console.log(`ü§ñ –ù–∞—á–∏–Ω–∞—é AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é ${items.length} —Ç–æ–≤–∞—Ä–æ–≤...`);
    console.log(`üìã –¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:`, items.map(i => i.name).join(', '));
    console.log(`üè∑Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`, categories.map(c => c.name).join(', '));

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    const categoriesText = categories.map(cat => 
      `- "${cat.name}" (ID: ${cat.id}): ${cat.description}`
    ).join('\n');

    const itemsText = items.map(item => 
      `"${item.name}" (ID: ${item.id})`
    ).join('\n');
    
    console.log(`üìù –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Claude API...`);

    const prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —á–µ–∫–æ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤. 

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –ø–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û —á–∏—Ç–∞—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π.

–î–û–°–¢–£–ü–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò (—á–∏—Ç–∞–π –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è):
${categoriesText}

–¢–û–í–ê–†–´ –î–õ–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò:
${itemsText}

–ü–†–ê–í–ò–õ–ê –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò:

1. –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û —á–∏—Ç–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ
2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: –ù–ê–ü–†–ò–ú–ï–†
   - –û–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã: –ª—É–∫, –æ–≥—É—Ä—Ü—ã, –ø–æ–º–∏–¥–æ—Ä—ã, —è–±–ª–æ–∫–∏, –±–∞–Ω–∞–Ω—ã, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –º–æ—Ä–∫–æ–≤—å
   - –ë–µ–ª–æ–∫: –º—è—Å–æ, —Ä—ã–±–∞, –∫—É—Ä–∏—Ü–∞, –≥–æ–≤—è–¥–∏–Ω–∞, —Å–≤–∏–Ω–∏–Ω–∞, —Ñ–∞—Ä—à, —è–π—Ü–∞, –∫–æ–ª–±–∞—Å–∞
   - –ú–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è: –º–æ–ª–æ–∫–æ, —Å—ã—Ä, —Ç–≤–æ—Ä–æ–≥, –π–æ–≥—É—Ä—Ç, –∫–µ—Ñ–∏—Ä, —Å–º–µ—Ç–∞–Ω–∞, –º–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ
   - –ë–∞–∫–∞–ª–µ—è: –∫—Ä—É–ø—ã, –º—É–∫–∞, —Å–∞—Ö–∞—Ä, —Å–æ–ª—å, –º–∞–∫–∞—Ä–æ–Ω—ã, —Ä–∏—Å, –≥—Ä–µ—á–∫–∞, —Ö–ª–µ–±
   - –ß–∞–π, –∫–æ—Ñ–µ: —á–∞–π (–ª—é–±–æ–π –≤–∏–¥), –∫–æ—Ñ–µ (–ª—é–±–æ–π –≤–∏–¥), –∫–∞–∫–∞–æ
   - –î–∂–∞–Ω–≥-—Ñ—É–¥: —á–∏–ø—Å—ã, —Å–ª–∞–¥–æ—Å—Ç–∏, –ø–µ—á–µ–Ω—å–µ, –∫–æ–Ω—Ñ–µ—Ç—ã, –º–∞—Ä–º–µ–ª–∞–¥, —Å–Ω–µ–∫–∏
   - –ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è: –º–æ—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –ø–∞–∫–µ—Ç—ã, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≥–∏–≥–∏–µ–Ω—ã, —Ç—É–∞–ª–µ—Ç–Ω–∞—è –±—É–º–∞–≥–∞
   - –ü—Ä–æ—á–µ–µ: –≤—Å—ë —á—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –¥—Ä—É–≥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

3. –°–¢–†–û–ì–û —Å–ª–µ–¥—É–π –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–û–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã", —Ç–æ —Ç—É–¥–∞ –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã

4. –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è –º–µ–∂–¥—É –¥–≤—É–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ - –≤—ã–±–∏—Ä–∞–π –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é

5. –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û JSON –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π:

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–°–¢–†–û–ì–û):
{
  "ID_—Ç–æ–≤–∞—Ä–∞": ID_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏,
  "ID_—Ç–æ–≤–∞—Ä–∞": ID_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
}

–ü—Ä–∏–º–µ—Ä:
{
  "1": 10,
  "2": 8
}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON –æ–±—ä–µ–∫—Ç–æ–º, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!`;

    const anthropic = getAnthropicClient();
    const response = await anthropic.messages.create({
      model: 'claude-3-haiku-20240307',
      max_tokens: 1000,
      temperature: 0.3, // –î–µ–ª–∞–µ–º –±–æ–ª–µ–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º
      messages: [
        {
          role: 'user',
          content: prompt
        }
      ]
    });

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Claude API`);

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç Claude
    const content = response.content[0];
    if (content.type !== 'text') {
      throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude');
    }

    console.log(`üß† –û—Ç–≤–µ—Ç Claude:`, content.text);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ Claude –¥–æ–±–∞–≤–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)
    let jsonMatch = content.text.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω JSON –≤ –æ—Ç–≤–µ—Ç–µ Claude');
    }
    
    const classification = JSON.parse(jsonMatch[0]) as ClassificationResult;
    console.log(`üîç –†–∞—Å–ø–∞—Ä—à–µ–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:`, classification);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    console.log(`üîé –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...`);
    const validClassification: ClassificationResult = {};
    let validCount = 0;
    let fallbackCount = 0;
    
    for (const item of items) {
      const categoryId = classification[item.id];
      const category = categories.find(cat => cat.id === categoryId);
      
      if (categoryId && category) {
        validClassification[item.id] = categoryId;
        console.log(`‚úÖ "${item.name}" ‚Üí "${category.name}"`);
        validCount++;
      } else {
        // –ï—Å–ª–∏ AI –Ω–µ —Å–º–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–∞–ª –Ω–µ–≤–µ—Ä–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é,
        // –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü—Ä–æ—á–µ–µ" (–æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ–¥–Ω—è—è)
        const miscCategory = categories.find(cat => cat.name === '–ü—Ä–æ—á–µ–µ');
        const fallbackCategoryId = miscCategory?.id || categories[categories.length - 1].id;
        validClassification[item.id] = fallbackCategoryId;
        const fallbackCategory = categories.find(cat => cat.id === fallbackCategoryId);
        console.log(`‚ö†Ô∏è "${item.name}" ‚Üí "${fallbackCategory?.name}" (fallback)`);
        fallbackCount++;
      }
    }

    console.log(`üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${validCount} —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, ${fallbackCount} fallback`);
    return validClassification;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', (error as Error)?.message);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Ç–æ–≤–∞—Ä—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log('‚ö†Ô∏è AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –¢–æ–≤–∞—Ä—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç - –Ω–∏–∫–∞–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º
    return {};
  }
} 