import { Request, Response, Router } from 'express';
import multer from 'multer';
import sharp from 'sharp';
const qrnode = require('qrnode'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º require –¥–ª—è CommonJS
import { promisify } from 'util';

const router = Router();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!'));
    }
  },
});

// –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º callback-based —Ñ—É–Ω–∫—Ü–∏—é –≤ Promise
const qrDetect = promisify(qrnode.detect);

// –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
const processingMethods = [
  {
    name: '–û—Ä–∏–≥–∏–Ω–∞–ª',
    process: async (buffer: Buffer) => buffer
  },
  {
    name: '–ö–æ–Ω—Ç—Ä–∞—Å—Ç + —Ä–µ–∑–∫–æ—Å—Ç—å',
    process: async (buffer: Buffer) => {
      return await sharp(buffer)
        .modulate({ brightness: 1.1, saturation: 0.8 })
        .sharpen()
        .toBuffer();
    }
  },
  {
    name: '–ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ',
    process: async (buffer: Buffer) => {
      return await sharp(buffer)
        .greyscale()
        .threshold(128)
        .toBuffer();
    }
  },
  {
    name: '–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ',
    process: async (buffer: Buffer) => {
      return await sharp(buffer)
        .greyscale()
        .normalise()
        .toBuffer();
    }
  },
  {
    name: '–£–ª—É—á—à–µ–Ω–∏–µ –∫—Ä–∞–µ–≤',
    process: async (buffer: Buffer) => {
      return await sharp(buffer)
        .greyscale()
        .convolve({
          width: 3,
          height: 3,
          kernel: [-1, -1, -1, -1, 8, -1, -1, -1, -1]
        })
        .toBuffer();
    }
  },
  {
    name: '–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
    process: async (buffer: Buffer) => {
      return await sharp(buffer)
        .greyscale()
        .blur(0.5)
        .threshold(100)
        .toBuffer();
    }
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
async function tryDecodeQR(buffer: Buffer, filename: string) {
  console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º QR —Ñ–∞–π–ª: ${filename}`);
  
  for (let i = 0; i < processingMethods.length; i++) {
    const method = processingMethods[i];
    console.log(`üîß –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ ${i + 1}/${processingMethods.length}: ${method.name}`);
    
    try {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç–æ–¥—É
      const processedBuffer = await method.process(buffer);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è qrnode
      const tempPath = `/tmp/qr_temp_${Date.now()}.png`;
      await sharp(processedBuffer).png().toFile(tempPath);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å QR
      const decoded = await qrDetect(tempPath);
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      const fs = require('fs');
      try {
        fs.unlinkSync(tempPath);
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
      
      if (decoded && decoded.trim()) {
        console.log(`üéâ QR —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –º–µ—Ç–æ–¥–æ–º ${i + 1} (${method.name}):`, decoded.substring(0, 100) + '...');
        return {
          success: true,
          data: decoded,
          method: i + 1,
          methodName: method.name
        };
      } else {
        console.log(`‚ùå –ú–µ—Ç–æ–¥ ${i + 1} (${method.name}) –Ω–µ –Ω–∞—à–µ–ª QR –∫–æ–¥`);
      }
    } catch (error: any) {
      console.log(`‚ùå –ú–µ—Ç–æ–¥ ${i + 1} (${method.name}) –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error.message);
    }
  }
  
  console.log('üòû –í—Å–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ QR –∫–æ–¥');
  return {
    success: false,
    error: 'QR –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏'
  };
}

// Endpoint –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞
router.post('/scan-qr', upload.single('image'), async (req: Request & { file?: any }, res: Response) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
      });
    }

    const result = await tryDecodeQR(req.file.buffer, req.file.originalname);
    
    if (result.success) {
      res.json(result);
    } else {
      res.status(400).json(result);
    }
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR'
    });
  }
});

export default router; 