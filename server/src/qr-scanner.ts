import { Router, Request, Response } from 'express';
import multer from 'multer';
import sharp from 'sharp';
import decodeQR from 'qr/decode.js';
import { Bitmap } from 'qr';

const router = Router();

// Multer configuration for file uploads
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB limit
  },
  fileFilter: (req: any, file: any, cb: any) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
    }
  }
});

// QR Code scanning endpoint - —Ç–µ–ø–µ—Ä—å –Ω–∞ –±—ç–∫–µ–Ω–¥–µ!
router.post('/scan-qr', upload.single('image'), async (req: Request & { file?: any }, res: Response) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    console.log('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º QR —Ñ–∞–π–ª:', req.file.originalname);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏ —É–ª—É—á—à–µ–Ω–∏—è
    const originalBuffer = req.file.buffer;
    
    const enhancementMethods = [
      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      {
        name: '–û—Ä–∏–≥–∏–Ω–∞–ª',
        process: async (buffer: Buffer) => buffer
      },
      
             // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∑–∫–æ—Å—Ç–∏
       {
         name: '–ö–æ–Ω—Ç—Ä–∞—Å—Ç + —Ä–µ–∑–∫–æ—Å—Ç—å',
         process: async (buffer: Buffer) => sharp(buffer)
           .greyscale()
           .normalize()
           .modulate({ brightness: 1.2, saturation: 1.8 })
           .sharpen({ sigma: 1, m1: 0.5, m2: 2 })
           .png()
           .toBuffer()
       },
      
      // –í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ
      {
        name: '–ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ',
        process: async (buffer: Buffer) => sharp(buffer)
          .greyscale()
          .normalise()
          .threshold(120)
          .png()
          .toBuffer()
      },
      
      // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      {
        name: '–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ',
        process: async (buffer: Buffer) => sharp(buffer)
          .greyscale()
          .blur(0.3)
          .sharpen()
          .normalise()
          .threshold(100)
          .png()
          .toBuffer()
      },
      
      // –£–ª—É—á—à–µ–Ω–∏–µ –∫—Ä–∞–µ–≤
      {
        name: '–£–ª—É—á—à–µ–Ω–∏–µ –∫—Ä–∞–µ–≤',
        process: async (buffer: Buffer) => sharp(buffer)
          .greyscale()
          .convolve({
            width: 3,
            height: 3,
            kernel: [-1, -1, -1, -1, 9, -1, -1, -1, -1]
          })
          .normalise()
          .png()
          .toBuffer()
      },
      
             // –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
       {
         name: '–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
         process: async (buffer: Buffer) => sharp(buffer)
           .greyscale()
           .blur(0.5)
           .normalise()
           .modulate({ brightness: 1.3, saturation: 2.0 })
           .threshold(115)
           .png()
           .toBuffer()
       }
    ];

    for (let i = 0; i < enhancementMethods.length; i++) {
      const method = enhancementMethods[i];
      try {
        console.log(`üîß –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ ${i + 1}/${enhancementMethods.length}: ${method.name}`);
        
        const processedBuffer = await method.process(originalBuffer);
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const metadata = await sharp(processedBuffer).metadata();
        if (!metadata.width || !metadata.height) {
          console.log(`‚ùå –ú–µ—Ç–æ–¥ ${i + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
          continue;
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ raw pixel data  
        const { data, info } = await sharp(processedBuffer)
          .raw()
          .toBuffer({ resolveWithObject: true });

        // –°–æ–∑–¥–∞–µ–º bitmap –¥–ª—è QR –¥–µ–∫–æ–¥–µ—Ä–∞
        const bitmap = new Bitmap({ 
          width: info.width, 
          height: info.height 
        });
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º raw –¥–∞–Ω–Ω—ã–µ –≤ 2D –º–∞—Å—Å–∏–≤ –¥–ª—è qr –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        const channels = info.channels;
        const bmBits: number[][] = [];
        
        for (let y = 0; y < info.height; y++) {
          const row: number[] = [];
          for (let x = 0; x < info.width; x++) {
            const pixelIndex = (y * info.width + x) * channels;
            const value = channels === 1 ? data[pixelIndex] : 
                         Math.round(0.299 * data[pixelIndex] + 0.587 * data[pixelIndex + 1] + 0.114 * data[pixelIndex + 2]);
            // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            row.push(value > 128 ? 1 : 0);
          }
          bmBits.push(row);
        }
        
        bitmap.data = bmBits as any;

        // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å QR
        const decoded = decodeQR(bitmap.toImage());
        
        if (decoded && decoded.trim()) {
          console.log(`üéâ QR —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –º–µ—Ç–æ–¥–æ–º ${i + 1} (${method.name}):`, decoded.substring(0, 100) + '...');
          return res.json({ 
            success: true, 
            data: decoded,
            method: i + 1,
            methodName: method.name
          });
        } else {
          console.log(`‚ùå –ú–µ—Ç–æ–¥ ${i + 1}: QR –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π`);
        }
      } catch (error: any) {
        console.log(`‚ùå –ú–µ—Ç–æ–¥ ${i + 1} (${method.name}) –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error.message);
        continue;
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    console.log('üòû –í—Å–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ QR –∫–æ–¥');
    return res.json({ 
      success: false, 
      error: 'QR –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —á–µ—Ç—á–µ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.' 
    });

  } catch (error: any) {
    console.error('üí• –û—à–∏–±–∫–∞ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' 
    });
  }
});

export default router; 